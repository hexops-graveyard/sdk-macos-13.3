// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.59 clang-1403.0.22.8.50)
// swift-module-flags: -target arm64e-apple-macos13.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name VisionKit
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 201.7
import AppKit
import Foundation
import Swift
@_exported import VisionKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, *)
@available(macCatalyst, unavailable)
final public class ImageAnalysis {
  final public var transcript: Swift.String {
    get
  }
  final public func hasResults(for analysisTypes: VisionKit.ImageAnalyzer.AnalysisTypes) -> Swift.Bool
  @objc deinit
}
@available(iOS 16.0, macOS 13.0, *)
@available(macCatalyst, unavailable)
final public class ImageAnalyzer : @unchecked Swift.Sendable {
  public struct Configuration {
    public let analysisTypes: VisionKit.ImageAnalyzer.AnalysisTypes
    public var locales: [Swift.String]
    public init(_ types: VisionKit.ImageAnalyzer.AnalysisTypes)
  }
  public struct AnalysisTypes : Swift.OptionSet {
    public var rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let text: VisionKit.ImageAnalyzer.AnalysisTypes
    public static let machineReadableCode: VisionKit.ImageAnalyzer.AnalysisTypes
    public typealias ArrayLiteralElement = VisionKit.ImageAnalyzer.AnalysisTypes
    public typealias Element = VisionKit.ImageAnalyzer.AnalysisTypes
    public typealias RawValue = Swift.UInt
  }
  public init()
  final public class var isSupported: Swift.Bool {
    get
  }
  final public class var supportedTextRecognitionLanguages: [Swift.String] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(_ image: AppKit.NSImage, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(_ cgImage: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(_ ciImage: CoreImage.CIImage, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(_ pixelBuffer: CoreVideo.CVPixelBuffer, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func analyze(imageAt url: Foundation.URL, orientation: ImageIO.CGImagePropertyOrientation, configuration: VisionKit.ImageAnalyzer.Configuration) async throws -> VisionKit.ImageAnalysis
  #endif
  @objc deinit
}
@available(macOS 13.0, *)
@_Concurrency.MainActor public protocol ImageAnalysisOverlayViewDelegate : AnyObject {
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldBeginAt point: CoreFoundation.CGPoint, forAnalysisType analysisType: VisionKit.ImageAnalysisOverlayView.InteractionTypes) -> Swift.Bool
  @_Concurrency.MainActor func contentsRect(for overlayView: VisionKit.ImageAnalysisOverlayView) -> CoreFoundation.CGRect
  @_Concurrency.MainActor func contentView(for overlayView: VisionKit.ImageAnalysisOverlayView) -> AppKit.NSView?
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldHandleKeyDownEvent event: AppKit.NSEvent) -> Swift.Bool
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldShowMenuForEvent event: AppKit.NSEvent, atPoint point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, liveTextButtonDidChangeToVisible visible: Swift.Bool)
  @_Concurrency.MainActor func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, highlightSelectedItemsDidChange highlightSelectedItems: Swift.Bool)
}
@available(macOS 13.0, *)
extension VisionKit.ImageAnalysisOverlayViewDelegate {
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldBeginAt point: CoreFoundation.CGPoint, forAnalysisType analysisType: VisionKit.ImageAnalysisOverlayView.InteractionTypes) -> Swift.Bool
  @_Concurrency.MainActor public func contentsRect(for overlayView: VisionKit.ImageAnalysisOverlayView) -> CoreFoundation.CGRect
  @_Concurrency.MainActor public func contentView(for overlayView: VisionKit.ImageAnalysisOverlayView) -> AppKit.NSView?
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldHandleKeyDownEvent event: AppKit.NSEvent) -> Swift.Bool
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, shouldShowMenuForEvent event: AppKit.NSEvent, atPoint point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, liveTextButtonDidChangeToVisible visible: Swift.Bool)
  @_Concurrency.MainActor public func overlayView(_ overlayView: VisionKit.ImageAnalysisOverlayView, highlightSelectedItemsDidChange highlightSelectedItems: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @available(macOS 13.0, *)
@_Concurrency.MainActor final public class ImageAnalysisOverlayView : AppKit.NSView {
  public struct InteractionTypes : Swift.OptionSet {
    public var rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let automatic: VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public static let textSelection: VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public static let dataDetectors: VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public typealias ArrayLiteralElement = VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public typealias Element = VisionKit.ImageAnalysisOverlayView.InteractionTypes
    public typealias RawValue = Swift.UInt
  }
  @_Concurrency.MainActor @objc override dynamic public init(frame frameRect: Foundation.NSRect)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor convenience public init(_ delegate: any VisionKit.ImageAnalysisOverlayViewDelegate)
  @_Concurrency.MainActor weak final public var delegate: (any VisionKit.ImageAnalysisOverlayViewDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @objc override final public func viewDidMoveToSuperview()
  @_Concurrency.MainActor final public var analysis: VisionKit.ImageAnalysis? {
    get
    set
  }
  @_Concurrency.MainActor final public var preferredInteractionTypes: VisionKit.ImageAnalysisOverlayView.InteractionTypes {
    get
    set
  }
  @_Concurrency.MainActor final public var activeInteractionTypes: VisionKit.ImageAnalysisOverlayView.InteractionTypes {
    get
  }
  @_Concurrency.MainActor final public var selectableItemsHighlighted: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor weak final public var trackingImageView: AppKit.NSImageView? {
    get
    set
  }
  @_Concurrency.MainActor final public var hasActiveTextSelection: Swift.Bool {
    get
  }
  @_Concurrency.MainActor final public func resetSelection()
  @_Concurrency.MainActor final public var contentsRect: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor final public func setContentsRectNeedsUpdate()
  @_Concurrency.MainActor final public func hasInteractiveItem(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func hasText(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func hasDataDetector(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func hasSupplementaryInterface(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public func analysisHasText(at point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor final public var liveTextButtonVisible: Swift.Bool {
    get
  }
  @_Concurrency.MainActor final public var isSupplementaryInterfaceHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor final public func setSupplementaryInterfaceHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor final public var supplementaryInterfaceContentInsets: Foundation.NSEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor final public var supplementaryInterfaceFont: AppKit.NSFont? {
    get
    set
  }
  @objc deinit
}
